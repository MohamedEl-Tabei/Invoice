// <auto-generated />
using System;
using InvoiceDAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoiceDAL.Migrations
{
    [DbContext(typeof(InvoiceContext))]
    [Migration("20251004142839_m")]
    partial class m
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvoiceDAL.Models.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("InvoiceDAL.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            Name = "Education"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            Name = "Food"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            Name = "Transportation"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            Name = "Health"
                        },
                        new
                        {
                            Id = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            ConcurrencyStamp = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            Name = "Services"
                        });
                });

            modelBuilder.Entity("InvoiceDAL.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InvoiceDAL.Models.Price", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId", "CreatedOn");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("InvoiceDAL.Models.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe84",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe84",
                            Name = "Men’s Wear"
                        },
                        new
                        {
                            Id = "8f5d2472-3f60-4f66-a4ee-7a26f57e2e0f",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "8f5d2472-3f60-4f66-a4ee-7a26f57e2e0f",
                            Name = "Women’s Wear"
                        },
                        new
                        {
                            Id = "9a1a3b1e-d066-4dd6-8e6a-4e97f7b2ef70",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "9a1a3b1e-d066-4dd6-8e6a-4e97f7b2ef70",
                            Name = "Kids & Babies"
                        },
                        new
                        {
                            Id = "2cf7a9a5-1dd6-40a1-b04a-4eb1c7f54838",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "2cf7a9a5-1dd6-40a1-b04a-4eb1c7f54838",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = "6bbf63c4-2528-4e30-8a68-33dcb4ee0ef3",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe83",
                            ConcurrencyStamp = "6bbf63c4-2528-4e30-8a68-33dcb4ee0ef3",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = "f2a76835-c5cd-4d91-b355-37c818db9490",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            ConcurrencyStamp = "f2a76835-c5cd-4d91-b355-37c818db9490",
                            Name = "School Supplies"
                        },
                        new
                        {
                            Id = "84d4485e-4060-4df3-80ed-64ff1d2099d3",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            ConcurrencyStamp = "84d4485e-4060-4df3-80ed-64ff1d2099d3",
                            Name = "Books & Stationery"
                        },
                        new
                        {
                            Id = "51dfd39d-564e-4de2-8135-0f05366d68d0",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            ConcurrencyStamp = "51dfd39d-564e-4de2-8135-0f05366d68d0",
                            Name = "Online Courses"
                        },
                        new
                        {
                            Id = "8e482041-1844-4d3b-bd7f-89dba3a10941",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            ConcurrencyStamp = "8e482041-1844-4d3b-bd7f-89dba3a10941",
                            Name = "Private Lessons"
                        },
                        new
                        {
                            Id = "52f51a2a-4e85-4d91-a8a0-171a8a39e318",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            ConcurrencyStamp = "52f51a2a-4e85-4d91-a8a0-171a8a39e318",
                            Name = "Mobile Phones"
                        },
                        new
                        {
                            Id = "5b2ffca7-8af2-4c5b-9f45-2f908be9c1ea",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            ConcurrencyStamp = "5b2ffca7-8af2-4c5b-9f45-2f908be9c1ea",
                            Name = "Laptops & Computers"
                        },
                        new
                        {
                            Id = "e9b9b4ae-84e3-4ef9-8920-baeac7cb241b",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            ConcurrencyStamp = "e9b9b4ae-84e3-4ef9-8920-baeac7cb241b",
                            Name = "TV & Audio"
                        },
                        new
                        {
                            Id = "c62e935d-5d7a-4ee0-9a30-c6888f2b4f6a",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe82",
                            ConcurrencyStamp = "c62e935d-5d7a-4ee0-9a30-c6888f2b4f6a",
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = "20722ad6-174a-4eea-9e97-491e88f8e394",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            ConcurrencyStamp = "20722ad6-174a-4eea-9e97-491e88f8e394",
                            Name = "Cinema & Movies"
                        },
                        new
                        {
                            Id = "e1220173-0844-4a28-b3f0-bdb3ba6e5b54",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            ConcurrencyStamp = "e1220173-0844-4a28-b3f0-bdb3ba6e5b54",
                            Name = "Streaming Subscriptions"
                        },
                        new
                        {
                            Id = "2033b319-2149-45bb-94a0-6804f883d49a",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            ConcurrencyStamp = "2033b319-2149-45bb-94a0-6804f883d49a",
                            Name = "Games & Toys"
                        },
                        new
                        {
                            Id = "cfcaf271-27c6-4b64-8470-5af597004003",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe89",
                            ConcurrencyStamp = "cfcaf271-27c6-4b64-8470-5af597004003",
                            Name = "Concerts & Events"
                        },
                        new
                        {
                            Id = "cbab53b5-76b3-41e1-8485-0d7585a61b85",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            ConcurrencyStamp = "cbab53b5-76b3-41e1-8485-0d7585a61b85",
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = "fe8b4964-87e4-401f-9a44-45348d8d1af8",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            ConcurrencyStamp = "fe8b4964-87e4-401f-9a44-45348d8d1af8",
                            Name = "Restaurants & Cafes"
                        },
                        new
                        {
                            Id = "3e1e27a0-7261-4b62-8e4c-2a3fc7ebc090",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            ConcurrencyStamp = "3e1e27a0-7261-4b62-8e4c-2a3fc7ebc090",
                            Name = "Fast Food"
                        },
                        new
                        {
                            Id = "38e37c89-0ef4-4a6a-951f-9a5bc82a2920",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe81",
                            ConcurrencyStamp = "38e37c89-0ef4-4a6a-951f-9a5bc82a2920",
                            Name = "Bakeries & Sweets"
                        },
                        new
                        {
                            Id = "7ef51658-cc02-4af9-89e0-29d189b30a69",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            ConcurrencyStamp = "7ef51658-cc02-4af9-89e0-29d189b30a69",
                            Name = "Living Room Furniture"
                        },
                        new
                        {
                            Id = "6bbfcb72-5528-4f68-89e4-2cbfcd16621c",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            ConcurrencyStamp = "6bbfcb72-5528-4f68-89e4-2cbfcd16621c",
                            Name = "Bedroom Furniture"
                        },
                        new
                        {
                            Id = "6b9a5061-18a2-45cc-9e0e-2170f79cfe7b",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            ConcurrencyStamp = "6b9a5061-18a2-45cc-9e0e-2170f79cfe7b",
                            Name = "Office Furniture"
                        },
                        new
                        {
                            Id = "03e2fca0-5313-4d59-b78d-303e70a17a71",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            ConcurrencyStamp = "03e2fca0-5313-4d59-b78d-303e70a17a71",
                            Name = "Outdoor Furniture"
                        },
                        new
                        {
                            Id = "1896315a-3c1e-4b20-b6af-423902cd8ee7",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            ConcurrencyStamp = "1896315a-3c1e-4b20-b6af-423902cd8ee7",
                            Name = "Public Transport"
                        },
                        new
                        {
                            Id = "d84df214-cf36-4eea-b3ec-422693e1c74f",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            ConcurrencyStamp = "d84df214-cf36-4eea-b3ec-422693e1c74f",
                            Name = "Fuel"
                        },
                        new
                        {
                            Id = "b69fc653-85bb-46f8-9c92-70e85eb0fc68",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            ConcurrencyStamp = "b69fc653-85bb-46f8-9c92-70e85eb0fc68",
                            Name = "Taxi & Ride Sharing"
                        },
                        new
                        {
                            Id = "8d775015-7f63-43de-aab3-6c9cb2294170",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            ConcurrencyStamp = "8d775015-7f63-43de-aab3-6c9cb2294170",
                            Name = "Vehicle Maintenance"
                        },
                        new
                        {
                            Id = "10df0b8c-10a1-4cc5-95d0-7f0d3cce0f88",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            ConcurrencyStamp = "10df0b8c-10a1-4cc5-95d0-7f0d3cce0f88",
                            Name = "Medicines & Pharmacy"
                        },
                        new
                        {
                            Id = "a16cc45a-1ef0-4745-b7cc-25e699a40c47",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            ConcurrencyStamp = "a16cc45a-1ef0-4745-b7cc-25e699a40c47",
                            Name = "Doctor Visits"
                        },
                        new
                        {
                            Id = "e6895ef5-df64-4781-b099-98f2f7af5f70",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            ConcurrencyStamp = "e6895ef5-df64-4781-b099-98f2f7af5f70",
                            Name = "Health Insurance"
                        },
                        new
                        {
                            Id = "bbf29261-3bc1-42ba-9c63-7086f7a3cc39",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe87",
                            ConcurrencyStamp = "bbf29261-3bc1-42ba-9c63-7086f7a3cc39",
                            Name = "Fitness & Gym"
                        },
                        new
                        {
                            Id = "de5f74bc-33ff-4b3a-bc48-1c6993e1a40d",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            ConcurrencyStamp = "de5f74bc-33ff-4b3a-bc48-1c6993e1a40d",
                            Name = "Cleaning Services"
                        },
                        new
                        {
                            Id = "9a6dcb70-899e-4c5f-b2d2-4bfb60126f5f",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            ConcurrencyStamp = "9a6dcb70-899e-4c5f-b2d2-4bfb60126f5f",
                            Name = "Repair & Maintenance"
                        },
                        new
                        {
                            Id = "22622b36-1538-4de7-a171-9f40ce6232a8",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            ConcurrencyStamp = "22622b36-1538-4de7-a171-9f40ce6232a8",
                            Name = "Beauty & Salon"
                        },
                        new
                        {
                            Id = "aef55b58-19e0-4964-bf1c-8e0545276ef7",
                            CategoryId = "78b21eb8-d6dc-4acf-9ab8-91bf746efe88",
                            ConcurrencyStamp = "aef55b58-19e0-4964-bf1c-8e0545276ef7",
                            Name = "Delivery Services"
                        });
                });

            modelBuilder.Entity("InvoiceDAL.Models.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            Email = "customer@invoice.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@INVOICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL7WjDMwY3woFxTEb0W7TPm2KCYv32cjIiqIycV9hbLbAQPGcBdVTUD6J0zqwNtEzQ==",
                            PhoneNumber = "01020210495",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            Email = "shop@invoice.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHOP@INVOICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIK9uTYXCvIWty97KaIFFZD3WEtTOnLwhEEd8Rmeh8pVc2CT6Nz4SaZ29Q/gcAPsmQ==",
                            PhoneNumber = "01020210795",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            TwoFactorEnabled = false,
                            UserName = "shop"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            Email = "admin@invoice.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@INVOICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPr74T9wKgN2Rckq/lrBX/SBjQmOeXJxxeikNvCivCUe3THuR7c/fmcvzMMhkppuA==",
                            PhoneNumber = "01020210595",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf886efe86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            Email = "restaurant@invoice.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RESTAURANT@INVOICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGdbCxXrHMnHDB8zj2UlxfY4/BPnIhBuTiykMG6xIwwGZXqwRZdtJBzu6bRIM98HQw==",
                            PhoneNumber = "01020211595",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0b1c8f2-3e4a-4c5b-8f6d-7e8f9a0b1c2d",
                            TwoFactorEnabled = false,
                            UserName = "restaurant"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe84",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe85",
                            Name = "Shop",
                            NormalizedName = "SHOP"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe86",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "28b21eb8-d6dc-4dcf-9ab8-91bf886efe86",
                            Name = "Restaurant",
                            NormalizedName = "RESTAURANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "28b21eb8-d6dc-4acf-9ab8-91bf746efe84",
                            RoleId = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe84"
                        },
                        new
                        {
                            UserId = "28b21eb8-d6dc-4acf-9ab8-91bf746efe86",
                            RoleId = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe86"
                        },
                        new
                        {
                            UserId = "28b21eb8-d6dc-4acf-9ab8-91bf746efe85",
                            RoleId = "28b21eb8-d6dc-4dcf-9ab8-91bf746efe85"
                        },
                        new
                        {
                            UserId = "28b21eb8-d6dc-4dcf-9ab8-91bf886efe86",
                            RoleId = "28b21eb8-d6dc-4dcf-9ab8-91bf886efe86"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InvoiceDAL.Models.AuditLog", b =>
                {
                    b.HasOne("InvoiceDAL.Models.UserApp", "Admin")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("InvoiceDAL.Models.Item", b =>
                {
                    b.HasOne("InvoiceDAL.Models.SubCategory", "SubCategory")
                        .WithMany("Items")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("InvoiceDAL.Models.Price", b =>
                {
                    b.HasOne("InvoiceDAL.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InvoiceDAL.Models.SubCategory", b =>
                {
                    b.HasOne("InvoiceDAL.Models.Category", "Category")
                        .WithMany("subCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InvoiceDAL.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InvoiceDAL.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceDAL.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InvoiceDAL.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvoiceDAL.Models.Category", b =>
                {
                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("InvoiceDAL.Models.SubCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("InvoiceDAL.Models.UserApp", b =>
                {
                    b.Navigation("AuditLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
